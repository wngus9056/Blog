---
title:  "[DataBase] Index"
subtitle: "클러스터와 넌클러스터"
author: "Sirom"
avatar: "img/authors/Ho.jpg"
image: "img/Database.jpg"
date: 2022-02-14 04:12:12 -0800
---
***

<b class="topic">○ 인덱스</b>
<p class="content">인덱스는 정렬된 데이터의 위치를 알려주어 빠르게 검색할 수 있게 해준다.</p>
<br />
<br />
<br />
<p class="content">그러면 모든 테이블에 인덱스를 만들어주면 좋지 않은가?</p>
<br />
<b class="content">그렇지 않다.</b>
<p class="content">인덱스를 무조건 만들어주는 것이 좋은 방법은 아니다.</p>
<br />
<b class="why">why?</b>
<p class="content">인덱스를 생성하면 인덱스를 위한 디스크 공간(8kb)이 필요하고,<br><u>인덱스를 가진 테이블에 DML 작업을 할 경우 더 많은 시간과 시간이 필요하다.</u></p>
<br />
<b class="why">why?</b>
<p class="content">인덱스는 데이터가 정렬된 상태를 유지해줘야 하는데, <br>INSERT, UPDATE, DELETE로 데이터가 추가되거나 수정되면<br>다시 정렬해줘야 하기 때문이다.<br />
그리고 INDEX 테이블, 원본 테이블 두 군데에서<br>데이터 수정 작업을 해줘야 한다.</p>
<br />
<br />
<br />
<br />
<b class="topic">○ 클러스터 인덱스와 넌클러스터 인덱스</b>
<br />
<b class="content">테이블 생성</b>
<p class="subcontent">(exampleTable 이라는 이름의 테이블을 만들어주고, 순서 섞인 데이터를 넣어준다.)</p>

```sql
USE studydb
CREATE TABLE exampleTable
(
  id int NOT NULL,
  value varchar(20) NOT NULL
);
GO
INSERT INTO exampleTable VALUES (5, 'Text5');
INSERT INTO exampleTable VALUES (4, 'Text4');
INSERT INTO exampleTable VALUES (8, 'Text8');
INSERT INTO exampleTable VALUES (1, 'Text1');
INSERT INTO exampleTable VALUES (3, 'Text3');
INSERT INTO exampleTable VALUES (2, 'Text2');
INSERT INTO exampleTable VALUES (6, 'Text6');
INSERT INTO exampleTable VALUES (7, 'Text7');
GO
```

<b class="content">클러스터 인덱스 생성</b>
<p class="subcontent">(exampleTable 테이블, id 열에 클러스터형 인덱스를 가지는 Primary Key를 만든다.)</p>

```sql
ALTER TABLE exampleTable 
  ADD PRIMARY KEY CLUSTERED (id)
GO
```

<p class="content">클러스터형 인덱스를 만들면, 다음 그림과 같이</p>

<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F6Z586%2FbtqRL4kkF6C%2FKt5Q6PyQWSUBy4QE22MOE0%2Fimg.png" width="600" height="300">  

<p class="content">해당 열(id)로 데이터를 정렬한 후에 루트 페이지를 만든다.<br />
즉, 데이터 페이지는 리프 페이지와 같다.</p>
<br />
<b class="why">why?</b>
<p class="content">aaa</p>
